/*matrix a;
matrix b;

a.width = 64;
a.height = 1;
a.data = (float*)malloc(sizeof(float) * a.width*a.height);

b.width = 64;
b.height = a.width;
b.data = (float*)malloc(sizeof(float)*a.width*b.width);

float *result_d = (float*)malloc(sizeof(float)*b.width);
float *result_c = (float*)malloc(sizeof(float)*b.width);

for (int x = 0; x < b.width; x++) {
	result_d[x] = 0.0f;
	result_c[x] = 0.0f;
}
ofstream stream = ofstream("matrix1");
ofstream stream2 = ofstream("matrix2");
for (int y = 0; y < b.height; y++) {
	for (int x = 0; x < b.width; x++) {
		b.data[y*b.width + x] = 0.5f + y * b.width + x;
		stream << b.data[y*b.width + x] << " ";
	}
	stream << endl;
	a.data[y] = 0.5f + y;
	stream2 << a.data[y] << " ";
}
stream.close();
stream2.close();
cl_kernel kernel = clCreateKernel(cl_ctx->getProgram(), "vec_mat_mul", NULL);
cl_mem first = clCreateBuffer(cl_ctx->getContext(), CL_MEM_READ_WRITE, sizeof(float)*a.width, NULL, NULL);
cl_mem second = clCreateBuffer(cl_ctx->getContext(), CL_MEM_READ_WRITE, sizeof(float)*b.width*b.height, NULL, NULL);
cl_mem result = clCreateBuffer(cl_ctx->getContext(), CL_MEM_READ_WRITE, sizeof(float)*b.width, NULL, NULL);

clEnqueueWriteBuffer(cl_ctx->getQueue(), first, false, 0, sizeof(float)*a.width, a.data, 0, NULL, NULL);
clEnqueueWriteBuffer(cl_ctx->getQueue(), second, false, 0, sizeof(float)*b.width*b.height, b.data, 0, NULL, NULL);
clEnqueueWriteBuffer(cl_ctx->getQueue(), result, false, 0, sizeof(float)*b.width*b.height, result_d, 0, NULL, NULL);

clFinish(cl_ctx->getQueue());

uint32_t beg = 0;

clSetKernelArg(kernel, 0, sizeof(uint32_t), &a.width);
clSetKernelArg(kernel, 1, sizeof(uint32_t), &b.width);
clSetKernelArg(kernel, 2, sizeof(first), &first);
clSetKernelArg(kernel, 3, sizeof(second), &second);
clSetKernelArg(kernel, 4, sizeof(result), &result);

size_t global[] = { b.width };
size_t local[] = { 32 };
clEnqueueNDRangeKernel(cl_ctx->getQueue(), kernel, 1, NULL, global, local, 0, NULL, NULL);
clEnqueueReadBuffer(cl_ctx->getQueue(), result, false, 0, sizeof(float)*b.width, result_d, 0, NULL, NULL);
clFinish(cl_ctx->getQueue());
for (int x = 0; x < b.width; x++) {
		for (int y = 0; y < b.height; y++) {
			result_c[x] += a.data[y] * b.data[y*b.width + x];
		}
	}
	for (int i = 0; i < b.width; i++) {
		cout << result_d[i] << " ";
	}
	cout << endl;

	for (int i = 0; i < b.width; i++) {
		cout << result_c[i] << " ";
	}
	cout << endl;*/
	
	float A[] = { 1.0f,1.2f,2.1f,1.0f,0.5f };
	float B[] = { 3.0f,4.2f,1.0f,3.0f,1.5f };

	float A[] = { 0.1f,2.0f,1.2f,3.0f,1.2f };
	float B[] = { 0.4f,1.0f,5.0f,2.0f,0.2f };
	float *C = (float*)malloc(sizeof(float) * 5);
	
	for (int i = 0; i < 64; i++) {
		cout << vec[i] << " ";
	}
	cout << endl;
	for (int i = 0; i < 32; i++) {
		cout<<vec2[i]<<" ";
	}
	cout << endl<<(data_size/2)*(vec[0]+vec[data_size-1]);
	
	/*float *sume = (float*)malloc(sizeof(float)* output->kernel_layer_size);
	clEnqueueReadBuffer(context->getQueue(), output_mem, false, 0, sizeof(float)*output->kernel_layer_size, sume, 0, NULL, NULL);
	clFinish(context->getQueue());
	for (int i = 0; i < 48; i++) {
		sum += sume[i];
		cout << sume[i] << " ";
	}
	cout << endl << sum << endl;*/

